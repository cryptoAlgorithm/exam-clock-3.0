{"version":3,"sources":["components/ScrollTop.js","components/FontSearcher.js","components/Settings.js","lib/themeOptions.js","pages/Credits.js","App.js","lib/reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["ScrollTop","props","children","window","trigger","useScrollTrigger","target","undefined","disableHysteresis","threshold","in","onClick","event","anchor","ownerDocument","document","querySelector","scrollIntoView","behavior","block","role","sx","position","bottom","right","useStyles","makeStyles","theme","fullW","width","txtFSp","marginTop","spacing","FontSearcher","useState","open","setOpen","options","setOptions","selVal","setSelVal","loading","length","classes","useEffect","active","a","fetch","catch","err","console","log","resp","status","json","items","Autocomplete","className","onOpen","onClose","value","onChange","e","nv","v","Object","keys","find","key","onURLChanged","files","regular","replace","getOptionSelected","option","family","getOptionLabel","renderInput","params","TextField","variant","label","placeholder","InputProps","endAdornment","CircularProgress","color","size","flexD","display","supBtn","height","marginLeft","Settings","formatAction","openNew","u","DialogContent","DialogContentText","Accordion","AccordionSummary","expandIcon","Typography","AccordionDetails","clsx","examTitle","examTitleChange","multiline","maxRows","examDesc","examDescChange","trim","LocalizationProvider","dateAdapter","AdapterDateFns","TimePicker","mask","stTime","newValue","setStTime","ampm","openTo","views","inputFormat","duration","setDuration","margin","ToggleButtonGroup","appearance","setAppearance","aria-label","ToggleButton","Tooltip","title","includes","fontURLChange","IconButton","Date","getFullYear","ButtonGroup","justifyContent","Button","startIcon","href","themeOptions","mode","fontURL","customFont","shape","borderRadius","palette","primary","main","secondary","typography","fontFamily","components","MuiCssBaseline","styleOverrides","createMuiTheme","tpS","Credits","AppBar","Toolbar","mr","component","flexGrow","id","Container","maxWidth","Box","my","Divider","Link","Fab","Main","lazy","NotFound","About","App","d","localStorage","setFontURL","JSON","parse","appear","setAppear","ThemeProvider","CssBaseline","fallback","style","minHeight","alignItems","exact","path","sa","f","sf","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.444b3025.chunk.js","sourcesContent":["import useScrollTrigger from '@material-ui/core/useScrollTrigger';\nimport Zoom from '@material-ui/core/Zoom';\nimport Box from '@material-ui/core/Box';\n\nexport default function ScrollTop(props) {\n    const { children, window } = props;\n    // Note that you normally won't need to set the window ref as useScrollTrigger\n    // will default to window.\n    // This is only being set here because the demo is in an iframe.\n    const trigger = useScrollTrigger({\n        target: window ? window() : undefined,\n        disableHysteresis: true,\n        threshold: 100,\n    });\n\n    const handleClick = (event) => {\n        const anchor = (event.target.ownerDocument || document).querySelector(\n            '#header',\n        );\n\n        if (anchor) {\n            anchor.scrollIntoView({\n                behavior: 'smooth',\n                block: 'center',\n            });\n        }\n    };\n\n    return (\n        <Zoom in={trigger}>\n            <Box\n                onClick={handleClick}\n                role=\"presentation\"\n                sx={{ position: 'fixed', bottom: 16, right: 16 }}\n            >\n                {children}\n            </Box>\n        </Zoom>\n    );\n}","import { makeStyles } from '@material-ui/core/styles';\nimport { useState, useEffect } from \"react\";\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/core/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStyles = makeStyles((theme) => ({\n    fullW: {\n        width: '100%'\n    },\n    txtFSp: {\n        marginTop: theme.spacing(1.5) + ' !important'\n    }\n}));\n\nexport default function FontSearcher(props) {\n    const [open, setOpen] = useState(false);\n    const [options, setOptions] = useState([]);\n    const [selVal, setSelVal] = useState(null);\n    const loading = open && options.length === 0;\n\n    const classes = useStyles();\n\n    useEffect(() => {\n        let active = true;\n\n        if (!loading) return undefined;\n\n        (async () => {\n            const resp = await fetch('https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyCHAiEzW77cEfanXlsRhFrHXoyz3jWr9EI')\n                .catch(function(err) {\n                    console.log('Fetch Error :-S', err);\n                });\n            if (resp.status !== 200) {\n                console.log('Looks like there was a problem. Status Code: ' +\n                    resp.status);\n                return;\n            }\n\n            if (active) setOptions((await resp.json()).items);\n        })();\n\n        return () => {\n            active = false;\n        };\n    }, [loading]);\n\n    return (\n        <Autocomplete\n            open={open}\n            className={classes.fullW}\n            onOpen={() => {\n                setOpen(true);\n            }}\n            onClose={() => {\n                setOpen(false);\n            }}\n            value={selVal}\n            onChange={(e, nv) => {\n                setSelVal(nv);\n                const v = options[Object.keys(options).find(key => options[key] === nv)];\n                if (v) props.onURLChanged(v.files.regular.replace(/^http/m, 'https'));\n            }}\n            getOptionSelected={(option, value) => option.family === value.family}\n            getOptionLabel={(option) => option.family}\n            options={options}\n            loading={loading}\n            renderInput={(params) => (\n                <TextField\n                    {...params}\n                    variant='filled'\n                    label='Search for a font'\n                    placeholder={''}\n                    InputProps={{\n                        ...params.InputProps,\n                        endAdornment: (\n                            <>\n                                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\n                                {params.InputProps.endAdornment}\n                            </>\n                        ),\n                    }}\n                />\n            )}\n        />\n    );\n}","import * as React from 'react';\nimport FontSearcher from './FontSearcher';\nimport clsx from 'clsx';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport TextField from '@material-ui/core/TextField';\n\nimport Accordion from '@material-ui/core/Accordion';\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\nimport Typography from '@material-ui/core/Typography';\n\nimport ExpandMoreRoundedIcon from '@material-ui/icons/ExpandMoreRounded';\nimport UndoRoundedIcon from '@material-ui/icons/UndoRounded';\nimport ModeNightRoundedIcon from '@material-ui/icons/ModeNightRounded';\nimport AccessTimeRoundedIcon from '@material-ui/icons/AccessTimeRounded';\nimport MailRoundedIcon from '@material-ui/icons/MailRounded';\n\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport LocalizationProvider from '@material-ui/lab/LocalizationProvider';\nimport TimePicker from '@material-ui/lab/TimePicker';\nimport AdapterDateFns from '@material-ui/lab/AdapterDateFns';\n\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ToggleButtonGroup from '@material-ui/core/ToggleButtonGroup'\nimport ToggleButton from '@material-ui/core/ToggleButton'\n\nconst useStyles = makeStyles((theme) => ({\n    fullW: {\n        width: '100%'\n    },\n    txtFSp: {\n        marginTop: theme.spacing(1.5) + ' !important'\n    },\n    flexD: {\n        display: 'flex'\n    },\n    supBtn: {\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n        marginLeft: theme.spacing(1) + ' !important'\n    }\n}));\n\nexport default function Settings(props) {\n    const classes = useStyles();\n\n    const formatAction = (e, a) => (e ? 'Disable' : 'Enable') + a;\n\n    const openNew = (u) => window.open(u);\n\n    return (\n        <DialogContent>\n            <DialogContentText>\n                Settings, a place where you change settings\n            </DialogContentText>\n\n            <Accordion>\n                <AccordionSummary expandIcon={<ExpandMoreRoundedIcon />}>\n                    <Typography>Exam Information</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        Add exam information to be displayed (e.g. Module code & title)\n                    </Typography>\n\n                    <TextField\n                        label=\"Exam Title\"\n                        variant=\"filled\"\n                        className={clsx(classes.fullW, classes.txtFSp)}\n                        value={props.examTitle}\n                        onChange={(e) => props.examTitleChange(e.target.value)}\n                    />\n                    <TextField\n                        label=\"Additional Information\"\n                        multiline\n                        variant=\"filled\"\n                        className={clsx(classes.fullW, classes.txtFSp)}\n                        maxRows={5}\n                        value={props.examDesc}\n                        onChange={(e) => props.examDescChange(e.target.value)}\n                    />\n                    <Typography variant={'caption'}>\n                        {(props.examTitle.trim() === '' || props.examDesc.trim() === '') ?\n                            'Both fields need to be filled in' :\n                            'The information is currently displayed beside the clock'\n                        }\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n\n            <Accordion>\n                <AccordionSummary expandIcon={<ExpandMoreRoundedIcon />}>\n                    <Typography>Timer</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        Edit exam durations and timer settings\n                    </Typography>\n\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\n                        <TimePicker\n                            mask=\"__:__ __\"\n                            label=\"Start Time\"\n                            value={props.stTime}\n                            onChange={(newValue) => {\n                                props.setStTime(newValue);\n                            }}\n                            renderInput={(params) => <TextField\n                                variant=\"filled\"\n                                {...params}\n                                className={clsx(classes.fullW, classes.txtFSp)}/>}\n                        />\n                        <TimePicker\n                            ampm={false}\n                            openTo=\"hours\"\n                            views={['hours', 'minutes', 'seconds']}\n                            inputFormat=\"HH:mm:ss\"\n                            mask=\"__:__:__\"\n                            label=\"Duration\"\n                            value={props.duration}\n                            onChange={(newValue) => {\n                                props.setDuration(newValue);\n                            }}\n                            renderInput={(params) => <TextField\n                                variant=\"filled\"\n                                {...params}\n                                margin=\"normal\"\n                                className={classes.fullW}\n                            />}\n                        />\n                    </LocalizationProvider>\n                </AccordionDetails>\n            </Accordion>\n\n            <Accordion>\n                <AccordionSummary expandIcon={<ExpandMoreRoundedIcon />}>\n                    <Typography>Appearance</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        Change theme, UI font and more\n                    </Typography>\n\n                    <ToggleButtonGroup value={props.appearance}\n                                       onChange={(e, nv) => props.setAppearance(nv)}\n                                       aria-label=\"Appearance\"\n                                       className={classes.txtFSp}>\n                        <ToggleButton value=\"dark\" aria-label=\"Dark mode\">\n                            <Tooltip title={formatAction(props.appearance.includes('dark'), ' dark mode')}>\n                                <ModeNightRoundedIcon />\n                            </Tooltip>\n                        </ToggleButton>\n                        <ToggleButton value=\"12hr\" aria-label=\"12 hour clock\">\n                            <Tooltip title={formatAction(props.appearance.includes('12hr'), ' 12-hour time')}>\n                                <AccessTimeRoundedIcon />\n                            </Tooltip>\n                        </ToggleButton>\n                    </ToggleButtonGroup>\n\n                    <div className={clsx(classes.flexD, classes.txtFSp)}>\n                        <FontSearcher onURLChanged={props.fontURLChange}/>\n                        <Tooltip title='Reset to default font'>\n                            <IconButton className={classes.supBtn} onClick={() => props.fontURLChange(null)}>\n                                <UndoRoundedIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                </AccordionDetails>\n            </Accordion>\n\n            <Accordion>\n                <AccordionSummary expandIcon={<ExpandMoreRoundedIcon />}>\n                    <Typography>More Info</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        An exam clock to be used in exams<br/>\n                        A project by Vincent Kwok, {new Date().getFullYear()}\n                    </Typography>\n                    <ButtonGroup variant=\"outlined\" aria-label=\"Contact me\"\n                                 sx={{width: '100%', justifyContent: 'center'}}\n                                 className={classes.txtFSp}>\n                        <Button onClick={() => openNew('https://github.com/cryptoAlgorithm/exam-clock-3.0')}>GitHub</Button>\n                        <Button onClick={() => openNew('/about')}>About</Button>\n                        <Button onClick={() => openNew('/credits')}>Credits</Button>\n                    </ButtonGroup>\n                    <Button sx={{ marginTop: 1.5, width: '100%' }}\n                            startIcon={<MailRoundedIcon />}\n                            href='mailto:hi@clockexe.cf'\n                            variant='contained'>\n                        Contact Me\n                    </Button>\n                </AccordionDetails>\n            </Accordion>\n        </DialogContent>\n    );\n}","import {createMuiTheme, } from \"@material-ui/core\";\n\n\nexport default function themeOptions(mode, fontURL) {\n    const customFont = fontURL != null && fontURL !== 'null';\n    const options = {\n        shape: {\n            borderRadius: 7,\n        },\n        palette: {\n            mode: mode,\n            primary: {\n                main: '#1976d2',\n            },\n            secondary: {\n                main: '#9c27b0',\n            },\n        },\n        typography: {\n            fontFamily: (customFont ? '\"customFont\",' : '') + '\"Roboto\",\"Helvetica\",\"Arial\",sans-serif',\n        },\n        components: {\n            MuiCssBaseline: {\n                styleOverrides: (customFont ? `\n            @font-face {\n                font-family: 'customFont';\n                font-style: normal;\n                font-display: swap;\n                font-weight: 400;\n                src: url('${fontURL}') format('truetype');\n            }\n            ` : '') + (mode === 'dark' ?\n                    `/* ====== Custom scrollbar ======= */\n::-webkit-scrollbar {\n    background-color: #fff;\n    width: 14px\n}\n\n/* Background of the scrollbar except button or resizer */\n::-webkit-scrollbar-track {\n    background-color: #121212;\n}\n\n::-webkit-scrollbar-corner {\n    background-color: #121212;\n}\n\nbody.light ::-webkit-scrollbar-track, body.light ::-webkit-scrollbar-corner {\n    background-color: rgb(223, 223, 223);\n}\n\n/* scrollbar itself */\n::-webkit-scrollbar-thumb {\n    background-color: rgb(107, 107, 107);\n    border-radius: 14px;\n    border: 3px solid #121212;\n    transition: all 500ms ease-out;\n}\n::-webkit-scrollbar-thumb:hover {\n    background-color: rgb(149, 149, 149);\n}\n\n.light *::-webkit-scrollbar-thumb {\n    background-color: rgb(150, 150, 150) !important;\n    border: 3px solid rgb(223, 223, 223) !important;\n}\n.light *::-webkit-scrollbar-thumb:hover {\n    background-color: rgb(101, 101, 101) !important;\n}\n/* ============ */` : ''),\n            },\n        }\n    }\n\n    console.log(createMuiTheme(options))\n    return (createMuiTheme(options))\n}","import {makeStyles} from '@material-ui/core/styles';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Fab from '@material-ui/core/Fab';\nimport Divider from '@material-ui/core/Divider';\n\nimport KeyboardArrowUpRoundedIcon from '@material-ui/icons/KeyboardArrowUpRounded';\nimport DescriptionRoundedIcon from '@material-ui/icons/DescriptionRounded';\nimport HomeRoundedIcon from '@material-ui/icons/HomeRounded';\n\nimport ScrollTop from '../components/ScrollTop';\nimport IconButton from '@material-ui/core/IconButton';\nimport {Link} from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    tpS: {\n        marginTop: theme.spacing(1) + '!important',\n        display: 'block',\n    },\n}));\n\nexport default function Credits(props) {\n    const classes = useStyles();\n\n    return (\n        <>\n            <AppBar>\n                <Toolbar>\n                    <DescriptionRoundedIcon sx={{ mr: 2 }} />\n                    <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n                        Credits\n                    </Typography>\n                    <IconButton href='/'><HomeRoundedIcon /></IconButton>\n                </Toolbar>\n            </AppBar>\n            <Toolbar id=\"header\" /> { /* This ID is required for scrolling to top */ }\n            <Container maxWidth='md'>\n                <Box sx={{ my: 2 }}>\n                    <Typography variant='h2'>Credits</Typography>\n                    <Divider />\n\n                    <Typography variant='h6' className={classes.tpS}>\n                        Work in progress - More detailed credits coming soon\n                    </Typography>\n                    <Typography variant='p' className={classes.tpS}>\n                        This project would not have been possible without the following amazing libraries/frameworks:\n                        <ul>\n                            <li><Link href='https://material-ui.com'>Material UI</Link></li>\n                            <li><Link href='https://reactjs.org'>ReactJS</Link></li>\n                        </ul>\n                    </Typography>\n                </Box>\n            </Container>\n\n            <ScrollTop {...props}>\n                <Fab color=\"secondary\" size=\"small\" aria-label=\"scroll back to top\"><KeyboardArrowUpRoundedIcon /></Fab>\n            </ScrollTop>\n        </>\n    );\n}","import './components/Settings'\nimport themeOptions from './lib/themeOptions';\n\nimport { useState, lazy, Suspense } from 'react';\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from 'react-router-dom';\nimport Credits from './pages/Credits';\n\nconst Main = lazy(() => import('./pages/Main'));\nconst NotFound = lazy(() => import('./pages/NotFound'));\nconst About = lazy(() => import('./pages/About'));\n\nexport default function App() {\n    const returnIfNull = (v, d) => !v || v === 'null' ? d : v;\n\n    const\n        [fontURL, setFontURL] = useState(localStorage.fontURL),\n        [appear, setAppear]   = useState(JSON.parse(returnIfNull(localStorage.appearance, '[]')));\n\n    return (\n        <Router>\n            <ThemeProvider theme={themeOptions(appear.includes('dark') ? 'dark' : 'light', fontURL)}>\n                <CssBaseline />\n                <Suspense fallback={\n                    <div style={{minHeight: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n                        Loading...\n                    </div>\n                }>\n                    <Switch>\n                        <Route exact path={['/', '/index', '/index.html', '.', './index.html']}><Main a={appear} sa={setAppear} f={fontURL} sf={setFontURL}/></Route>\n                        <Route path='/about'><About /></Route>\n                        <Route path='/credits'><Credits /></Route>\n                        <Route path='*'><NotFound /></Route>\n                    </Switch>\n                </Suspense>\n            </ThemeProvider>\n        </Router>\n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://cra.link/PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://cra.link/PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './lib/reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();"],"sourceRoot":""}